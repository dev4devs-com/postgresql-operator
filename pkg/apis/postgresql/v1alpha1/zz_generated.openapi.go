// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.Backup":         schema_pkg_apis_postgresql_v1alpha1_Backup(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.BackupSpec":     schema_pkg_apis_postgresql_v1alpha1_BackupSpec(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.BackupStatus":   schema_pkg_apis_postgresql_v1alpha1_BackupStatus(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.Database":       schema_pkg_apis_postgresql_v1alpha1_Database(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.DatabaseSpec":   schema_pkg_apis_postgresql_v1alpha1_DatabaseSpec(ref),
		"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.DatabaseStatus": schema_pkg_apis_postgresql_v1alpha1_DatabaseStatus(ref),
	}
}

func schema_pkg_apis_postgresql_v1alpha1_Backup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.BackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.BackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.BackupSpec", "github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.BackupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_postgresql_v1alpha1_BackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupSpec defines the desired state of Backup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"databaseCRName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Database CR applied which this backup will work with Default Value: \"database\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"schedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"productName": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to create the directory where the files will be stored Default Value: <postgresql>",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsS3BucketName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsAccessKeyID": {
						SchemaProps: spec.SchemaProps{
							Description: "Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretAccessKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptKeySecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgPublicKey": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgEmail": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gpgTrustModel": {
						SchemaProps: spec.SchemaProps{
							Description: "GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_postgresql_v1alpha1_BackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupStatus defines the observed state of Backup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"backupStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Will be as \"OK when all objects are created successfully",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cronJobName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the CronJob object created and managed by it to schedule the backup job",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dbSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the secret object created with the database data to allow the backup image connect to the database",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name  of the secret object with the Aws data to allow send the backup files to the AWS storage",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"awsCredentialsSecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name  of the secret object with the Encryption GPG Key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"encryptKeySecretNamespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace of the secret object with the Encryption GPG Key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hasEncryptKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when it has an EncryptionKey to be used to send the backup files",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"isDatabasePodFound": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"isDatabaseServiceFound": {
						SchemaProps: spec.SchemaProps{
							Description: "Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cronJobStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the CronJob object",
							Ref:         ref("k8s.io/api/batch/v1beta1.CronJobStatus"),
						},
					},
				},
				Required: []string{"backupStatus", "cronJobName", "dbSecretName", "awsSecretName", "awsCredentialsSecretNamespace", "encryptKeySecretName", "encryptKeySecretNamespace", "hasEncryptKey", "isDatabasePodFound", "isDatabaseServiceFound", "cronJobStatus"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/batch/v1beta1.CronJobStatus"},
	}
}

func schema_pkg_apis_postgresql_v1alpha1_Database(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.DatabaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.DatabaseStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.DatabaseSpec", "github.com/dev4devs-com/postgresql-operator/pkg/apis/postgresql/v1alpha1.DatabaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_postgresql_v1alpha1_DatabaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatabaseSpec defines the desired state of Database",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"databaseName": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (spec.databaseNameKeyEnvVar). Default value: example",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePassword": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (spec.databasePasswordKeyEnvVar). Default value: postgres",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUser": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable (spec.databaseUserKeyEnvVar). Default value: postgres",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseNameKeyEnvVar": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database mame Note that each database version/image can expected a different value for it. Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePasswordKeyEnvVar": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database password Note that each database version/image can expected a different value for it. Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseUserKeyEnvVar": {
						SchemaProps: spec.SchemaProps{
							Description: "Key Value for the Database Environment Variable in order to inform the database user Note that each database version/image can expected a different value for it. Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databasePort": {
						SchemaProps: spec.SchemaProps{
							Description: "Value for the Database Environment Variable in order to define the port which it should use. It will be used in its container as well",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Quantity of instances Default value: 1",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Database image:tag Default value: centos/postgresql-96-centos7",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name to create the Database container",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseMemoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory which will be available for the database container Default value: 512Mi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseMemoryRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Memory Request which will be available for the database container Default value: 128Mi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseStorageRequest": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of Storage Request which will be available for the database container Default value: 1Gi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseCPU": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU resource request which will be available for the database container Default value: 10Mi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"databaseCPULimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Limit of CPU request which will be available for the database container Default value: 20Mi",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerImagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/ Default value:",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the ConfigMap where the operator should looking for the EnvVars keys and/or values only Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapDatabaseNameKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap key where the operator should looking for the value for the database name for its env var Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapDatabasePasswordKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap key where the operator should looking for the value for the database user for its env var Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMapDatabaseUserKey": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the configMap key where the operator should looking for the value for the database password for its env var Default value: nil",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_postgresql_v1alpha1_DatabaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatabaseStatus defines the observed state of Database",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pvcStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the PersistentVolumeClaim created and managed by it",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimStatus"),
						},
					},
					"deploymentStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Database Deployment created and managed by it",
							Ref:         ref("k8s.io/api/apps/v1.DeploymentStatus"),
						},
					},
					"serviceStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the Database Service created and managed by it",
							Ref:         ref("k8s.io/api/core/v1.ServiceStatus"),
						},
					},
					"databaseStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "It will be as \"OK when all objects are created successfully",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"pvcStatus", "deploymentStatus", "serviceStatus", "databaseStatus"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/apps/v1.DeploymentStatus", "k8s.io/api/core/v1.PersistentVolumeClaimStatus", "k8s.io/api/core/v1.ServiceStatus"},
	}
}
